// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Board  {
  id Int @id @default(autoincrement())
  title     String   @db.VarChar(255)
  category  String   @db.Text
  description String @db.Text
  comments  Comment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  favorites Favorite[]

  @@index([title, category, description, userId])
}

model Comment  {
  id Int @id @default(autoincrement())
  comment String @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  favorites Favorite []
  board     Board    @relation(fields: [boardId],  references: [id])
  boardId   Int
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String

  @@index([comment, boardId, userId])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("session")
}

model User {
  id      String   @id @default(cuid())
  name    String   @db.VarChar(255)
  email   String?   @unique
  image   String?
  emailVerified DateTime?
  comments Comment[]
  boards Board[]
  accounts Account[]
  sessions Session[]
  favorites Favorite[]
  @@map("user")

  @@index([name,image])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtoken")
}

model Favorite {
  id Int @id @default(autoincrement())
  userId  String
  boardId Int
  commentId Int @map("commentid")
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  board   Board   @relation(fields: [boardId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references:[id], onDelete: Cascade)

  @@map("favorite")
  @@index([userId,boardId,commentId])
}


